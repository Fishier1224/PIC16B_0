[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Athena (Chou) Mo",
    "section": "",
    "text": "This is Athena’s blog for PIC16B"
  },
  {
    "objectID": "posts/Palmer-Penguins-data-visualization/Untitled.html",
    "href": "posts/Palmer-Penguins-data-visualization/Untitled.html",
    "title": "Palmer Penguins Data Visualization",
    "section": "",
    "text": "Begin by importing all the needed libraries. For databaset modifications, Pandas is required, while it will also be later used for visualization - along with Plotly and Matplotlib.\n\nimport pandas as pd\nfrom plotly import __version__\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport matplotlib.pyplot as plt\n\nWith the packages imported, we now read in the dataset (by using the provided url) and name it as penguins:\n\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\nNow, specifically for the Species Adelie Penguin (Pygoscelis adeliae), we create a sub-dataframe named adelie_df that isolates data points for delie Penguins from the larger penguins dataframe:\n\nadelie_df = penguins[penguins[\"Species\"] == \"Adelie Penguin (Pygoscelis adeliae)\"].reset_index(drop=True)\nadelie_df.dropna()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n6\nPAL0708\n7\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN4A1\nNo\n11/15/07\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n9.18718\n-25.21799\nNest never observed with full clutch.\n\n\n7\nPAL0708\n8\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN4A2\nNo\n11/15/07\n39.2\n19.6\n195.0\n4675.0\nMALE\n9.46060\n-24.89958\nNest never observed with full clutch.\n\n\n28\nPAL0708\n29\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN18A1\nNo\n11/10/07\n37.9\n18.6\n172.0\n3150.0\nFEMALE\n8.38404\n-25.19837\nNest never observed with full clutch.\n\n\n29\nPAL0708\n30\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN18A2\nNo\n11/10/07\n40.5\n18.9\n180.0\n3950.0\nMALE\n8.90027\n-25.11609\nNest never observed with full clutch.\n\n\n38\nPAL0708\n39\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN25A1\nNo\n11/13/07\n37.6\n19.3\n181.0\n3300.0\nFEMALE\n9.41131\n-25.04169\nNest never observed with full clutch.\n\n\n68\nPAL0809\n69\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN32A1\nNo\n11/11/08\n35.9\n16.6\n190.0\n3050.0\nFEMALE\n8.47781\n-26.07821\nNest never observed with full clutch.\n\n\n69\nPAL0809\n70\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN32A2\nNo\n11/11/08\n41.8\n19.4\n198.0\n4450.0\nMALE\n8.86853\n-26.06209\nNest never observed with full clutch.\n\n\n120\nPAL0910\n121\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN66A1\nNo\n11/17/09\n36.2\n17.2\n187.0\n3150.0\nFEMALE\n9.04296\n-26.19444\nNest never observed with full clutch.\n\n\n121\nPAL0910\n122\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN66A2\nNo\n11/17/09\n37.7\n19.8\n198.0\n3500.0\nMALE\n9.11066\n-26.42563\nNest never observed with full clutch.\n\n\n130\nPAL0910\n131\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN73A1\nNo\n11/23/09\n38.5\n17.9\n190.0\n3325.0\nFEMALE\n8.98460\n-25.57956\nNest never observed with full clutch.\n\n\n131\nPAL0910\n132\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN73A2\nNo\n11/23/09\n43.1\n19.2\n197.0\n3500.0\nMALE\n8.86495\n-26.13960\nNest never observed with full clutch.\n\n\n138\nPAL0910\n139\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN79A1\nNo\n11/16/09\n37.0\n16.5\n185.0\n3400.0\nFEMALE\n8.61651\n-26.07021\nNest never observed with full clutch.\n\n\n139\nPAL0910\n140\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN79A2\nNo\n11/16/09\n39.7\n17.9\n193.0\n4250.0\nMALE\n9.25769\n-25.88798\nNest never observed with full clutch.\n\n\n\n\n\n\n\nNote that the second line in the code block above drops rows for the adelie_df dataframe that includes NaN (incomplete data).\n\n\n\n\n\nFor plotly’s scatter plot, trace is a graph object that includes information about the graph’s x & y values, labels, and marker settings.\nThe following code block defines a new trace named trace1 which is specific to Adelie penguins using the adelie_df that we created before. It assigns “Culmen Length (mm) as the x values and Body Mass (g) as the y values.\nmode=“markers” specifies the drawing mode for the scatter plot. In this case, we are using markers.\nFor the line marker=dict(size=10, symbol=“circle”, line=dict(color=“rgb(0,0,0)”, width=0.5)), it defines the attribute marker (in the trace object) that specifies the design of the markers for the scatter plot. size is set to 10 pixels, and symbol is set to circle. line defines the marker’s outline, which is now black (“rgb(0,0,0)”) and has a width of 0.5.\nThe following line sets the marker color is set to black, and the line below that sets the label name to ““Adelie Penguin”.\n\ntrace1 = go.Scatter(\n    x=adelie_df[\"Culmen Length (mm)\"],\n    y=adelie_df[\"Body Mass (g)\"],\n    mode=\"markers\",\n    marker=dict(size=10, symbol=\"circle\", line=dict(color=\"rgb(0,0,0)\", width=0.5)),\n    marker_color=\"black\",\n    name=\"Adelie Penguin\",\n)\n\nNow we assigns the trace object to the variable data:\n\ndata = trace1\n\nAnd here we define the design for the plot. The title is set to “Culmen Depth (mm) vs. Body Mass (g) for Adelie Penguin” with the legend settings to “True” (which means to include it in the plot). The x-axis title is set to “Culmen Depth (mm)”, and the y-axis title is set to “Body Mass (g)”. The last two lines specifies that the background color for both plot area and the entire plot is transparent (“rgba(0,0,0,0)”).\n\nlayout = dict(\n    title=\"&lt;b&gt;Culmen Depth (mm) vs. Body Mass (g) for Adelie Penguin&lt;/b&gt;\",\n    showlegend=True,\n    xaxis=dict(title=\"Culmen Depth (mm)\"),\n    yaxis=dict(title=\"Body Mass (g)\"),\n    plot_bgcolor=\"rgba(0,0,0,0)\",\n    paper_bgcolor=\"rgba(0,0,0,0)\",\n)\n\nThe first two lines are used to set up the Plotly rendering so that the plots will properly display in JupyterNotebook. Lastly, we create a dictionary fig that includes both data as data and layout as layout. Then the plot is displayed with the line iplot(fig):\n\nimport plotly.io as pio\npio.renderers.default = 'notebook'\n\nfig = dict(data=data, layout=layout)\niplot(fig)\n\n                                                \n\n\n\n\n\n\nSince we are evaluating the Species and Sex variables for all species of penguins, we need to first define a new sub-dataframe that groups the two variables.\nThe following line calls the penguins dataframe and groups the rows from the dataframe based on the columns ‘Species’and ’Sex’. The feature .size() counts the size for each group. The feature .reset_index(name=‘count’) first resets the index of the newly structured dataframe then assigns a new column name count.\n\ngrouped_data = penguins.groupby(['Species', 'Sex']).size().reset_index(name='count')\n\nNow we need to clean the data. Notice how there are three categories for sex: MALE, FEMALE, and “.”\nSince “.” makes invalid information, we are dropping the rows with sex as “.” using the following line:\n\ngrouped_data = grouped_data[grouped_data['Sex'] != \".\"]\n\nSince we want to display the Species on the x-axis and the Sex stacked on the y-axis, we need to pivot the grouped_data using grouped_data.pivot, setting “Species” as the rows, “Sex” as columns, and the values as “count” (which is basically the frequency).\n\npivot_data = grouped_data.pivot(index='Species', columns='Sex', values='count')\n\nNow we plot the bar graph using .plot and setting the plot kind to “bar” and enabling stack with “stacked=True”.\nFor the following three lines, the plot’s x-label is set to “Species”, y-label as “Frequency”, and plot title as “Propotion of Sex by Species”.\nFinally, we run plt.show() to display the plot.\n\npivot_data.plot(kind='bar', stacked=True)\n\nplt.xlabel('Species')\nplt.ylabel('Frequency')\nplt.title('Propotion of Sex by Species')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nMatplotlib has a cool feature for color called colormap. Using the .plot.scatter function, we call the penguins dataframe and sets the x variable as ‘Culmen Length (mm)’ and the y variable as ‘Body Mass (g)’. Notice how another variable (‘Flipper Length (mm)’) is assigned to c. This is used as scale for the colormap. Lastly, the colormap is assigned as ‘viridis’.\nThe following lines, like seen previously, sets the title for the plot and displays it.\n\nax1 = penguins.plot.scatter(x='Culmen Length (mm)', y='Body Mass (g)', c = 'Flipper Length (mm)', colormap='viridis')\n\nplt.title('Culmen Length (mm) vs. Body Mass (g) for all Species')\n\nplt.show()"
  },
  {
    "objectID": "posts/Palmer-Penguins-data-visualization/Untitled.html#preparing-data",
    "href": "posts/Palmer-Penguins-data-visualization/Untitled.html#preparing-data",
    "title": "Palmer Penguins Data Visualization",
    "section": "",
    "text": "Begin by importing all the needed libraries. For databaset modifications, Pandas is required, while it will also be later used for visualization - along with Plotly and Matplotlib.\n\nimport pandas as pd\nfrom plotly import __version__\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport matplotlib.pyplot as plt\n\nWith the packages imported, we now read in the dataset (by using the provided url) and name it as penguins:\n\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\nNow, specifically for the Species Adelie Penguin (Pygoscelis adeliae), we create a sub-dataframe named adelie_df that isolates data points for delie Penguins from the larger penguins dataframe:\n\nadelie_df = penguins[penguins[\"Species\"] == \"Adelie Penguin (Pygoscelis adeliae)\"].reset_index(drop=True)\nadelie_df.dropna()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n6\nPAL0708\n7\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN4A1\nNo\n11/15/07\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n9.18718\n-25.21799\nNest never observed with full clutch.\n\n\n7\nPAL0708\n8\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN4A2\nNo\n11/15/07\n39.2\n19.6\n195.0\n4675.0\nMALE\n9.46060\n-24.89958\nNest never observed with full clutch.\n\n\n28\nPAL0708\n29\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN18A1\nNo\n11/10/07\n37.9\n18.6\n172.0\n3150.0\nFEMALE\n8.38404\n-25.19837\nNest never observed with full clutch.\n\n\n29\nPAL0708\n30\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN18A2\nNo\n11/10/07\n40.5\n18.9\n180.0\n3950.0\nMALE\n8.90027\n-25.11609\nNest never observed with full clutch.\n\n\n38\nPAL0708\n39\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN25A1\nNo\n11/13/07\n37.6\n19.3\n181.0\n3300.0\nFEMALE\n9.41131\n-25.04169\nNest never observed with full clutch.\n\n\n68\nPAL0809\n69\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN32A1\nNo\n11/11/08\n35.9\n16.6\n190.0\n3050.0\nFEMALE\n8.47781\n-26.07821\nNest never observed with full clutch.\n\n\n69\nPAL0809\n70\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN32A2\nNo\n11/11/08\n41.8\n19.4\n198.0\n4450.0\nMALE\n8.86853\n-26.06209\nNest never observed with full clutch.\n\n\n120\nPAL0910\n121\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN66A1\nNo\n11/17/09\n36.2\n17.2\n187.0\n3150.0\nFEMALE\n9.04296\n-26.19444\nNest never observed with full clutch.\n\n\n121\nPAL0910\n122\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN66A2\nNo\n11/17/09\n37.7\n19.8\n198.0\n3500.0\nMALE\n9.11066\n-26.42563\nNest never observed with full clutch.\n\n\n130\nPAL0910\n131\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN73A1\nNo\n11/23/09\n38.5\n17.9\n190.0\n3325.0\nFEMALE\n8.98460\n-25.57956\nNest never observed with full clutch.\n\n\n131\nPAL0910\n132\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN73A2\nNo\n11/23/09\n43.1\n19.2\n197.0\n3500.0\nMALE\n8.86495\n-26.13960\nNest never observed with full clutch.\n\n\n138\nPAL0910\n139\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN79A1\nNo\n11/16/09\n37.0\n16.5\n185.0\n3400.0\nFEMALE\n8.61651\n-26.07021\nNest never observed with full clutch.\n\n\n139\nPAL0910\n140\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN79A2\nNo\n11/16/09\n39.7\n17.9\n193.0\n4250.0\nMALE\n9.25769\n-25.88798\nNest never observed with full clutch.\n\n\n\n\n\n\n\nNote that the second line in the code block above drops rows for the adelie_df dataframe that includes NaN (incomplete data)."
  },
  {
    "objectID": "posts/Palmer-Penguins-data-visualization/Untitled.html#data-visualization",
    "href": "posts/Palmer-Penguins-data-visualization/Untitled.html#data-visualization",
    "title": "Palmer Penguins Data Visualization",
    "section": "",
    "text": "For plotly’s scatter plot, trace is a graph object that includes information about the graph’s x & y values, labels, and marker settings.\nThe following code block defines a new trace named trace1 which is specific to Adelie penguins using the adelie_df that we created before. It assigns “Culmen Length (mm) as the x values and Body Mass (g) as the y values.\nmode=“markers” specifies the drawing mode for the scatter plot. In this case, we are using markers.\nFor the line marker=dict(size=10, symbol=“circle”, line=dict(color=“rgb(0,0,0)”, width=0.5)), it defines the attribute marker (in the trace object) that specifies the design of the markers for the scatter plot. size is set to 10 pixels, and symbol is set to circle. line defines the marker’s outline, which is now black (“rgb(0,0,0)”) and has a width of 0.5.\nThe following line sets the marker color is set to black, and the line below that sets the label name to ““Adelie Penguin”.\n\ntrace1 = go.Scatter(\n    x=adelie_df[\"Culmen Length (mm)\"],\n    y=adelie_df[\"Body Mass (g)\"],\n    mode=\"markers\",\n    marker=dict(size=10, symbol=\"circle\", line=dict(color=\"rgb(0,0,0)\", width=0.5)),\n    marker_color=\"black\",\n    name=\"Adelie Penguin\",\n)\n\nNow we assigns the trace object to the variable data:\n\ndata = trace1\n\nAnd here we define the design for the plot. The title is set to “Culmen Depth (mm) vs. Body Mass (g) for Adelie Penguin” with the legend settings to “True” (which means to include it in the plot). The x-axis title is set to “Culmen Depth (mm)”, and the y-axis title is set to “Body Mass (g)”. The last two lines specifies that the background color for both plot area and the entire plot is transparent (“rgba(0,0,0,0)”).\n\nlayout = dict(\n    title=\"&lt;b&gt;Culmen Depth (mm) vs. Body Mass (g) for Adelie Penguin&lt;/b&gt;\",\n    showlegend=True,\n    xaxis=dict(title=\"Culmen Depth (mm)\"),\n    yaxis=dict(title=\"Body Mass (g)\"),\n    plot_bgcolor=\"rgba(0,0,0,0)\",\n    paper_bgcolor=\"rgba(0,0,0,0)\",\n)\n\nThe first two lines are used to set up the Plotly rendering so that the plots will properly display in JupyterNotebook. Lastly, we create a dictionary fig that includes both data as data and layout as layout. Then the plot is displayed with the line iplot(fig):\n\nimport plotly.io as pio\npio.renderers.default = 'notebook'\n\nfig = dict(data=data, layout=layout)\niplot(fig)"
  },
  {
    "objectID": "posts/Palmer-Penguins-data-visualization/Untitled.html#with-matplotlib-stacked-bar-plot-propotion-of-sex-by-species",
    "href": "posts/Palmer-Penguins-data-visualization/Untitled.html#with-matplotlib-stacked-bar-plot-propotion-of-sex-by-species",
    "title": "Palmer Penguins Data Visualization",
    "section": "",
    "text": "Since we are evaluating the Species and Sex variables for all species of penguins, we need to first define a new sub-dataframe that groups the two variables.\nThe following line calls the penguins dataframe and groups the rows from the dataframe based on the columns ‘Species’and ’Sex’. The feature .size() counts the size for each group. The feature .reset_index(name=‘count’) first resets the index of the newly structured dataframe then assigns a new column name count.\n\ngrouped_data = penguins.groupby(['Species', 'Sex']).size().reset_index(name='count')\n\nNow we need to clean the data. Notice how there are three categories for sex: MALE, FEMALE, and “.”\nSince “.” makes invalid information, we are dropping the rows with sex as “.” using the following line:\n\ngrouped_data = grouped_data[grouped_data['Sex'] != \".\"]\n\nSince we want to display the Species on the x-axis and the Sex stacked on the y-axis, we need to pivot the grouped_data using grouped_data.pivot, setting “Species” as the rows, “Sex” as columns, and the values as “count” (which is basically the frequency).\n\npivot_data = grouped_data.pivot(index='Species', columns='Sex', values='count')\n\nNow we plot the bar graph using .plot and setting the plot kind to “bar” and enabling stack with “stacked=True”.\nFor the following three lines, the plot’s x-label is set to “Species”, y-label as “Frequency”, and plot title as “Propotion of Sex by Species”.\nFinally, we run plt.show() to display the plot.\n\npivot_data.plot(kind='bar', stacked=True)\n\nplt.xlabel('Species')\nplt.ylabel('Frequency')\nplt.title('Propotion of Sex by Species')\n\nplt.show()"
  },
  {
    "objectID": "posts/Palmer-Penguins-data-visualization/Untitled.html#with-matplotlib-scatter-plot-culmen-length-mm-vs.-body-mass-g-for-all-species",
    "href": "posts/Palmer-Penguins-data-visualization/Untitled.html#with-matplotlib-scatter-plot-culmen-length-mm-vs.-body-mass-g-for-all-species",
    "title": "Palmer Penguins Data Visualization",
    "section": "",
    "text": "Matplotlib has a cool feature for color called colormap. Using the .plot.scatter function, we call the penguins dataframe and sets the x variable as ‘Culmen Length (mm)’ and the y variable as ‘Body Mass (g)’. Notice how another variable (‘Flipper Length (mm)’) is assigned to c. This is used as scale for the colormap. Lastly, the colormap is assigned as ‘viridis’.\nThe following lines, like seen previously, sets the title for the plot and displays it.\n\nax1 = penguins.plot.scatter(x='Culmen Length (mm)', y='Body Mass (g)', c = 'Flipper Length (mm)', colormap='viridis')\n\nplt.title('Culmen Length (mm) vs. Body Mass (g) for all Species')\n\nplt.show()"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nPalmer Penguins Data Visualization\n\n\n\n\n\n\nHW0\n\n\npandas\n\n\nplotly\n\n\nmatplotlib\n\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\nAthena Mo\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 23, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]